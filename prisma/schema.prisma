generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl", "linux-musl-openssl-3.0.x", "native"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName          String
  lastName           String
  email              String    @unique
  password           String
  deleted            Boolean   @default(false)
  deletedAt          DateTime? @updatedAt
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
  hashedRefreshToken String?
  profile            Profile?

  role   Role?   @relation(fields: [roleId], references: [id])
  roleId String? @db.ObjectId

  like    Like[]
  post    Post[]
  comment Comment[]
}

model Role {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  permitions String[]
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  user       User[]
}

model Profile {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  bio String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.ObjectId

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Post {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  published Boolean @default(false)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String @db.ObjectId

  deleted   Boolean   @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  comment  Comment[]
  like     Like[]
  category Category[]
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  post      Post?     @relation(fields: [postId], references: [id])
  postId    String?   @db.ObjectId
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String @db.ObjectId

  like Like[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  replys    Comment[] @relation("commentReplys")
  comment   Comment?  @relation("commentReplys", fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  commentId String?   @db.ObjectId
}

model Like {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String?  @db.ObjectId

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String? @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}
